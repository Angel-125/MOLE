PART:NEEDS[Pathfinder]
{
	// this is a sample config file, for determining a good file format for defining part parameters
	// comment line - ignored by cfg parser
	// empty lines, or lines without a '=' sign are also ignored
	// all other lines are split at the '=' sign, and the left operand is used to know what parameter we are setting
	// diferent parameters require data in different formats (see docs), and each module has it's own parameters (again, see docs)
	// each assignment must be in a single line. Lines without assignments will be ignored. (You CAN turn on word wrap, though)
	// each keyword here relates to an existing variable in the assigned module. If the keyword isn't found, it is ignored.
	// conversely, if a keyword is left unassigned (as in not in the file), it will be initialized with it's default value
	// This is done automatically, so any public variable defined in the loaded module can be accessed this way (provided it's value can be parsed)


	// --- general parameters ---
	name = wbiRecyclerArm2
	module = Part
	author = Michael Billard (Angel-125)

	// --- asset parameters ---
	rescaleFactor = 1

	MODEL
	{
		model = WildBlueIndustries/Buffalo/Assets/RecyclerArm2
	}

	// --- node definitions ---
	// definition format is Position X, Position Y, Position Z, Up X, Up Y, Up Z
	node_attach = 0, 0, 0, 0, -1, 0, 0
	node_stack_bottom = 0, 0, 0, 0, -1, 0, 0

	// --- editor parameters ---
	TechRequired = advConstruction
	entryCost = 15200
	cost = 750
	category = Utility
	subcategory = 0
	title = Buffalo Recycler Arm
	manufacturer = Wild Blue Industries
	description = When a construction site or favorite orbit becomes cluttered with junk and you don't have a skilled engineer around, this recycler arm can help clean up the mess. Just attach one to your vessel or rover, extend the arm, and aim the blowtorch at the junk part. The part will then be broken down into its usable resources, and any resources it stored will be recovered as well. It can be repositioned as desired and also comes with a magnet for lifting objects.

	// attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision
	attachRules = 1,1,0,1,1

	// --- standard part parameters ---
	mass = 0.4
	dragModelType = default
	maximum_drag = 0.25
	minimum_drag = 0.25
	angularDrag = .5
	crashTolerance = 45
	breakingForce = 28000
	breakingTorque = 28000
	maxTemp = 1400
	fuelCrossFeed = True
	bulkheadProfiles = size0, srf

	MODULE
	{
		name = WBIRecyclerArm
		animationName = Deploy
		startEventGUIName = Blowtorch On
		endEventGUIName = Blowtorch Off
		actionGUIName = Blowtorch On/Off
		recycleResource = Equipment
	}

	MODULE
	{
		name = WBIMagnetController
		magnetTransformName = magnetTransform
		groupID = Arm
		ecPerSec = 1.0

		//We'll use the Servo Manager to control the rotation
		//(defaults to true, so we have the buttons in the right-click menu)
		guiVisible = false

		attachEffectName = attachMagnet
		detachEffectName = detachMagnet
		runningEffectName = runningMagnet
	}

	MODULE
	{
		//This module handles mesh rotation operations such as an engine nacelle pivot.
		name = WBIRotationController

		//(Optional, defaults to Actuator) User-friendly name of the rotation controller.
		servoName = Pitch Magnet

		//(Optional, defaults to Engine) Group ID for the actuator. Allows you to differentiate
		//between the VTOL manager (which uses the Engine group), and, say, a robot arm manager.
		groupID = Arm

		//Name of the pivot z+ points down the length of the arm. See Unity model.
		rotationMeshName = MagnetTransform

		//Rotation axis of the pivot (x, y, z)
		rotationMeshAxis = 1,0,0

		//We'll use the Servo Manager to control the rotation
		//(defaults to true, so we have the buttons in the right-click menu)
		guiVisible = false

		//We don't do symmetry with this part. This is used for engines for the most part.
		canMirrorRotation = false

		//How fast to rotate the pivot
		rotationDegPerSec = 30

		maxRotateAngle = 90
		minRotateAngle = 270
		canRotateMin = true
		canRotateMax = true
	}


	MODULE
	{
		name = WBITranslationController

		//(Optional, defaults to Actuator) User-friendly name of the controller.
		servoName = Extend Wrist

		//Name of the mesh to move around
		meshTransformName = Wrist

		//Axis of movement
		movementAxis = 0,0,1

		hasMinDistance = false

		//Flag to indicate if the mesh can move "right" of its neutral position. "Neutral" is where the mesh is when first loaded into the game before any translation is applied. Default: true
		hasMaxDistance = true

		//Maximum distance from neutral that the mesh can traverse
		//minDistance---------neutral (0)---------maxDistance
		maxDistance = 0.4

		//The rate in meters per second that the mesh may move
		velocityMetersPerSec = 0.1

		//Effect to play when a servo is running
		runningEffectName = runningServo
	}

	MODULE
	{
		//This module handles mesh rotation operations such as an engine nacelle pivot.
		name = WBIRotationController
		
		//(Optional, defaults to Actuator) User-friendly name of the rotation controller.
		servoName = Rotate Wrist

		//(Optional, defaults to Engine) Group ID for the actuator. Allows you to differentiate
		//between the VTOL manager (which uses the Engine group), and, say, a robot arm manager.
		groupID = Arm

		//Name of the pivot z+ points down the length of the arm. See Unity model.
		rotationMeshName = Wrist

		//Rotation axis of the pivot (x, y, z)
		rotationMeshAxis = 0,0,1

		//We'll use the Servo Manager to control the rotation
		//(defaults to true, so we have the buttons in the right-click menu)
		guiVisible = false

		//We don't do symmetry with this part. This is used for engines for the most part.
		canMirrorRotation = false

		//How fast to rotate the pivot
		rotationDegPerSec = 30
	}

	MODULE
	{
		//This module handles mesh rotation operations such as an engine nacelle pivot.
		name = WBIRotationController

		//(Optional, defaults to Actuator) User-friendly name of the rotation controller.
		servoName = Pitch Forearm

		//(Optional, defaults to Engine) Group ID for the actuator. Allows you to differentiate
		//between the VTOL manager (which uses the Engine group), and, say, a robot arm manager.
		groupID = Arm

		//Name of the pivot z+ points down the length of the arm. See Unity model.
		rotationMeshName = Forearm

		//Rotation axis of the pivot (x, y, z)
		rotationMeshAxis = 1,0,0

		//We'll use the Servo Manager to control the rotation
		//(defaults to true, so we have the buttons in the right-click menu)
		guiVisible = false

		//We don't do symmetry with this part. This is used for engines for the most part.
		canMirrorRotation = false

		//How fast to rotate the pivot
		rotationDegPerSec = 30

		maxRotateAngle = 90
		minRotateAngle = 270
		canRotateMin = true
		canRotateMax = true
	}

	MODULE
	{
		//This module handles mesh rotation operations such as an engine nacelle pivot.
		name = WBIRotationController

		//(Optional, defaults to Actuator) User-friendly name of the rotation controller.
		servoName = Pitch Elbow

		//(Optional, defaults to Engine) Group ID for the actuator. Allows you to differentiate
		//between the VTOL manager (which uses the Engine group), and, say, a robot arm manager.
		groupID = Arm

		//Name of the pivot z+ points down the length of the arm. See Unity model.
		rotationMeshName = Elbow

		//Rotation axis of the pivot (x, y, z)
		rotationMeshAxis = 1,0,0

		//We'll use the Servo Manager to control the rotation
		//(defaults to true, so we have the buttons in the right-click menu)
		guiVisible = false

		//We don't do symmetry with this part. This is used for engines for the most part.
		canMirrorRotation = false

		//How fast to rotate the pivot
		rotationDegPerSec = 30

		maxRotateAngle = 90
		minRotateAngle = 270
		canRotateMin = true
		canRotateMax = true
	}

	MODULE
	{
		//This module handles mesh rotation operations such as an engine nacelle pivot.
		name = WBIRotationController

		//(Optional, defaults to Actuator) User-friendly name of the rotation controller.
		servoName = Pitch Shoulder

		//(Optional, defaults to Engine) Group ID for the actuator. Allows you to differentiate
		//between the VTOL manager (which uses the Engine group), and, say, a robot arm manager.
		groupID = Arm

		//Name of the pivot z+ points down the length of the arm. See Unity model.
		rotationMeshName = UpperArm

		//Rotation axis of the pivot (x, y, z)
		rotationMeshAxis = 1,0,0

		//We'll use the Servo Manager to control the rotation
		//(defaults to true, so we have the buttons in the right-click menu)
		guiVisible = false

		//We don't do symmetry with this part. This is used for engines for the most part.
		canMirrorRotation = false

		//How fast to rotate the pivot
		rotationDegPerSec = 30

		maxRotateAngle = 90
		minRotateAngle = 270
		canRotateMin = true
		canRotateMax = true
	}

	MODULE
	{
		//This module handles mesh rotation operations such as an engine nacelle pivot.
		name = WBIRotationController
		
		//(Optional, defaults to Actuator) User-friendly name of the rotation controller.
		servoName = Rotate Shoulder

		//(Optional, defaults to Engine) Group ID for the actuator. Allows you to differentiate
		//between the VTOL manager (which uses the Engine group), and, say, a robot arm manager.
		groupID = Arm

		//Name of the pivot z+ points down the length of the arm. See Unity model.
		rotationMeshName = Shoulder

		//Rotation axis of the pivot (x, y, z)
		rotationMeshAxis = 0,0,1

		//We'll use the Servo Manager to control the rotation
		//(defaults to true, so we have the buttons in the right-click menu)
		guiVisible = false

		//We don't do symmetry with this part. This is used for engines for the most part.
		canMirrorRotation = false

		//How fast to rotate the pivot
		rotationDegPerSec = 30
	}

	//Put this module LAST in the list of rotation controllers and such.
	//It provides a button to display a GUI.
	MODULE
	{
		name = WBIServoManager

		//Effect to play when a servo is running
		runningEffectName = runningServo
	}

	EFFECTS
	{
		attachMagnet
		{
			AUDIO
			{
				channel = Ship
				clip = Squad/Sounds/elev_start
				volume = 1.0
				pitch = 1.0
				loop = false
			}
		}

		detachMagnet
		{
			AUDIO
			{
				channel = Ship
				clip = Squad/Sounds/sound_click_tock
				volume = 1.0
				pitch = 1.0
				loop = false
			}
		}
		runningMagnet
		{
			AUDIO
			{
				channel = Ship
				clip = WildBlueIndustries/001KerbalActuators/Sounds/MagnetRunning
				volume = 0.0 0.0
				volume = 1.0 0.1
				pitch = 0.0 0.0
				pitch = 1.0 1.5
				loop = true
			}
		}
		runningServo
		{
			AUDIO
			{
				channel = Ship
				clip = WildBlueIndustries/001KerbalActuators/Sounds/ServoLoop
				volume = 0.0 0.0
				volume = 1.0 10.0
				pitch = 1.0 1.0
				loop = true
			}
		}
	}

	DRAG_CUBE
	{
		cube = A, 0.08601,0.7457,1.807, 0.08601,0.685,1.838, 0.186,0.7528,0.6909, 0.186,0.7486,0.6245, 0.1925,0.8016,0.3203, 0.1925,0.8022,0.2888, 0.8266,0.3239,0.0005939, 1.778,0.6471,0.2463
		cube = B, 0.04406,0.8421,0.8256, 0.04398,0.824,0.8642, 0.09626,0.7689,0.3505, 0.09626,0.806,0.3446, 0.1585,0.8148,0.2282, 0.1581,0.8154,0.2001, -0.2516,0.1543,-0.0001217, 0.7838,0.3079,0.1985
	}
}
