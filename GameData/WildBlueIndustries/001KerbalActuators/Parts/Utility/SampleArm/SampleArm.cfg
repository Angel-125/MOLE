PART
{
	// --- general parameters ---
	name = wbiSampleArm
	module = Part
	author = Pak/Michael Billard (Angel-125)

	// --- asset parameters ---
	rescaleFactor = 1
	MODEL
	{
		model = WildBlueIndustries/001KerbalActuators/Parts/Utility/SampleArm/Mk1StationArm
	}

	// --- node definitions ---
	// definition format is Position X, Position Y, Position Z, Up X, Up Y, Up Z
	node_stack_bottom = 0.0, -6.13745, 0.0, 0.0, -1.0, 0.0, 1
	node_attach = 0.0, -6.13745, 0.0, 0.0, -1.0, 0.0, 1

	// --- editor parameters ---
	TechRequired = actuators
	entryCost = 62500
	cost = 29000
	category = Utility
	subcategory = 0
	title = Mk1 Station Arm
	manufacturer = #autoLOC_501646 //#autoLOC_501646 = Dinkelstein Kerman's Construction Emporium
	description = This station arm is great for moving payloads around. You can create a series of snapshots of the arm's position to form a sequence. Sequences let you program the arm to animate it to perform routine tasks such as pre-positioning it to various locations.

	// attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision
	attachRules = 1,1,1,1,1

	// --- standard part parameters ---
	mass = 1.6 //Real-world Canadarm 2 is about this massive.
	dragModelType = default
	maximum_drag = 0.25
	minimum_drag = 0.25
	angularDrag = .5
	crashTolerance = 45
	breakingForce = 5500
	breakingTorque = 5500
	maxTemp = 900
	fuelCrossFeed = True
	heatConductivity = 0.001

	MODULE
	{
		name = ModuleDockingNode
		referenceAttachNode = bottom
		nodeType = size0
		stagingEnabled = False
	}

	MODULE
	{
		name = WBILightController
		servoName = Effector Light
		animationName = ArmLights
		startEventGUIName = Lights On
		endEventGUIName = Lights Off
		actionGUIName = Toggle Lights
		red = 1
		green = 1
		blue = 1
		intensity = 1
		ecRequired = 0.02
		animationLayer = 12

		//We'll use the Servo Manager to control the rotation
		//(defaults to true, so we have the buttons in the right-click menu)
		guiVisible = false
	}

	MODULE
	{
		name = WBIMagnetController
		magnetTransformName = magnetTransform
		groupID = Arm
		ecPerSec = 1.0

		//We'll use the Servo Manager to control the rotation
		//(defaults to true, so we have the buttons in the right-click menu)
		guiVisible = false

		attachEffectName = attachMagnet
		detachEffectName = detachMagnet
		runningEffectName = runningMagnet
	}

	MODULE
	{
		//This module handles mesh rotation operations such as an engine nacelle pivot.
		name = WBIRotationController

		//(Optional, defaults to Actuator) User-friendly name of the rotation controller.
		servoName = Roll Wrist

		//(Optional, defaults to Engine) Group ID for the actuator. Allows you to differentiate
		//between the VTOL manager (which uses the Engine group), and, say, a robot arm manager.
		groupID = Arm

		//Name of the pivot z+ points down the length of the arm. See Unity model.
		rotationMeshName = WristRoll

		//Rotation axis of the pivot (x, y, z)
		rotationMeshAxis = 0,0,1

		//We'll use the Servo Manager to control the rotation
		//(defaults to true, so we have the buttons in the right-click menu)
		guiVisible = false

		//We don't do symmetry with this part. This is used for engines for the most part.
		canMirrorRotation = false

		//How fast to rotate the pivot
		rotationDegPerSec = 15
	}

	MODULE
	{
		//This module handles mesh rotation operations such as an engine nacelle pivot.
		name = WBIRotationController

		//(Optional, defaults to Actuator) User-friendly name of the rotation controller.
		servoName = Pitch Wrist

		//(Optional, defaults to Engine) Group ID for the actuator. Allows you to differentiate
		//between the VTOL manager (which uses the Engine group), and, say, a robot arm manager.
		groupID = Arm

		//Name of the pivot z+ points down the length of the arm. See Unity model.
		rotationMeshName = WristPitch

		//Rotation axis of the pivot (x, y, z)
		rotationMeshAxis = 0,1,0

		//We'll use the Servo Manager to control the rotation
		//(defaults to true, so we have the buttons in the right-click menu)
		guiVisible = false

		//We don't do symmetry with this part. This is used for engines for the most part.
		canMirrorRotation = false

		//How fast to rotate the pivot
		rotationDegPerSec = 15
	}

	MODULE
	{
		//This module handles mesh rotation operations such as an engine nacelle pivot.
		name = WBIRotationController

		//(Optional, defaults to Actuator) User-friendly name of the rotation controller.
		servoName = Yaw Wrist

		//(Optional, defaults to Engine) Group ID for the actuator. Allows you to differentiate
		//between the VTOL manager (which uses the Engine group), and, say, a robot arm manager.
		groupID = Arm

		//Name of the pivot z+ points down the length of the arm. See Unity model.
		rotationMeshName = WristYaw

		//Rotation axis of the pivot (x, y, z)
		rotationMeshAxis = 1,0,0

		//We'll use the Servo Manager to control the rotation
		//(defaults to true, so we have the buttons in the right-click menu)
		guiVisible = false

		//We don't do symmetry with this part. This is used for engines for the most part.
		canMirrorRotation = false

		//How fast to rotate the pivot
		rotationDegPerSec = 15
	}

	MODULE
	{
		//This module handles mesh rotation operations such as an engine nacelle pivot.
		name = WBIRotationController

		//(Optional, defaults to Actuator) User-friendly name of the rotation controller.
		servoName = Bend Elbow

		//(Optional, defaults to Engine) Group ID for the actuator. Allows you to differentiate
		//between the VTOL manager (which uses the Engine group), and, say, a robot arm manager.
		groupID = Arm

		//Name of the pivot z+ points down the length of the arm. See Unity model.
		rotationMeshName = Elbow

		//Rotation axis of the pivot (x, y, z)
		rotationMeshAxis = 0,1,0

		//We'll use the Servo Manager to control the rotation
		//(defaults to true, so we have the buttons in the right-click menu)
		guiVisible = false

		//We don't do symmetry with this part. This is used for engines for the most part.
		canMirrorRotation = false

		//How fast to rotate the pivot
		rotationDegPerSec = 15
	}

	MODULE
	{
		//This module handles mesh rotation operations such as an engine nacelle pivot.
		name = WBIRotationController

		//(Optional, defaults to Actuator) User-friendly name of the rotation controller.
		servoName = Yaw Shoulder

		//(Optional, defaults to Engine) Group ID for the actuator. Allows you to differentiate
		//between the VTOL manager (which uses the Engine group), and, say, a robot arm manager.
		groupID = Arm

		//Name of the pivot z+ points down the length of the arm. See Unity model.
		rotationMeshName = ShoulderYaw

		//Rotation axis of the pivot (x, y, z)
		rotationMeshAxis = 1,0,0

		//We'll use the Servo Manager to control the rotation
		//(defaults to true, so we have the buttons in the right-click menu)
		guiVisible = false

		//We don't do symmetry with this part. This is used for engines for the most part.
		canMirrorRotation = false

		//How fast to rotate the pivot
		rotationDegPerSec = 15
	}

	MODULE
	{
		//This module handles mesh rotation operations such as an engine nacelle pivot.
		name = WBIRotationController

		//(Optional, defaults to Actuator) User-friendly name of the rotation controller.
		servoName = Pitch Shoulder

		//(Optional, defaults to Engine) Group ID for the actuator. Allows you to differentiate
		//between the VTOL manager (which uses the Engine group), and, say, a robot arm manager.
		groupID = Arm

		//Name of the pivot z+ points down the length of the arm. See Unity model.
		rotationMeshName = ShoulderPitch

		//Rotation axis of the pivot (x, y, z)
		rotationMeshAxis = 0,1,0

		//We'll use the Servo Manager to control the rotation
		//(defaults to true, so we have the buttons in the right-click menu)
		guiVisible = false

		//We don't do symmetry with this part. This is used for engines for the most part.
		canMirrorRotation = false

		//How fast to rotate the pivot
		rotationDegPerSec = 15
	}

	MODULE
	{
		//This module handles mesh rotation operations such as an engine nacelle pivot.
		name = WBIRotationController
		
		//(Optional, defaults to Actuator) User-friendly name of the rotation controller.
		servoName = Rotate Shoulder

		//(Optional, defaults to Engine) Group ID for the actuator. Allows you to differentiate
		//between the VTOL manager (which uses the Engine group), and, say, a robot arm manager.
		groupID = Arm

		//Name of the pivot z+ points down the length of the arm. See Unity model.
		rotationMeshName = ShoulderSwivel

		//Rotation axis of the pivot (x, y, z)
		rotationMeshAxis = 0,0,1

		//We'll use the Servo Manager to control the rotation
		//(defaults to true, so we have the buttons in the right-click menu)
		guiVisible = false

		//We don't do symmetry with this part. This is used for engines for the most part.
		canMirrorRotation = false

		//How fast to rotate the pivot
		rotationDegPerSec = 15
	}

	//Put this module LAST in the list of rotation controllers and such.
	//It provides a button to display a GUI.
	MODULE
	{
		name = WBIServoManager

		//Effect to play when a servo is running
		runningEffectName = runningServo
	}

	MODULE:NEEDS[KIS]
	{

		name = ModuleKISPickup

	        allowPartAttach = true

	        allowStaticAttach = false

	        allowPartStack = false

	        maxDistance = 16

	        grabMaxMass = 6

	        dropSndPath = KIS/Sounds/drop

	        attachPartSndPath = KIS/Sounds/attachPart

	        detachPartSndPath= KIS/Sounds/detachPart

	        attachStaticSndPath= KIS/Sounds/attachStatic

	        detachStaticSndPath= KIS/Sounds/detachStatic

	}


	EFFECTS
	{
		attachMagnet
		{
			AUDIO
			{
				channel = Ship
				clip = Squad/Sounds/elev_start
				volume = 1.0
				pitch = 1.0
				loop = false
			}
		}

		detachMagnet
		{
			AUDIO
			{
				channel = Ship
				clip = Squad/Sounds/sound_click_tock
				volume = 1.0
				pitch = 1.0
				loop = false
			}
		}
		runningMagnet
		{
			AUDIO
			{
				channel = Ship
				clip = WildBlueIndustries/001KerbalActuators/Sounds/MagnetRunning
				volume = 0.0 0.0
				volume = 1.0 0.1
				pitch = 0.0 0.0
				pitch = 1.0 1.5
				loop = true
			}
		}
		runningServo
		{
			AUDIO
			{
				channel = Ship
				clip = WildBlueIndustries/001KerbalActuators/Sounds/ServoLoop
				volume = 0.0 0.0
				volume = 1.0 10.0
				pitch = 1.0 1.0
				loop = true
			}
		}
	}
}