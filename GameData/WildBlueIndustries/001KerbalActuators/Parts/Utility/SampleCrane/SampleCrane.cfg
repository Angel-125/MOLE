PART
{
	// --- general parameters ---
	name = wbiSampleCrane
	module = Part
	author = Pak/Michael Billard (Angel-125)

	// --- asset parameters ---
	rescaleFactor = 1
	MODEL
	{
		model = WildBlueIndustries/001KerbalActuators/Parts/Utility/SampleCrane/KonstructionKrane
	}

	// --- node definitions ---
	// definition format is Position X, Position Y, Position Z, Up X, Up Y, Up Z
	node_stack_bottom = 0.0, -0, 0.0, 0.0, -1.0, 0.0, 1
	node_attach = 0.0, -0, 0.0, 0.0, -1.0, 0.0, 1

//	NODE
//	{
//		name = jibNode
//		transform = nodeJib
//	}

	// --- editor parameters ---
	TechRequired = actuators
	entryCost = 42740
	cost = 20000
	category = Utility
	subcategory = 0
	title = Konstruction Krane
	manufacturer = #autoLOC_501646 //#autoLOC_501646 = Dinkelstein Kerman's Construction Emporium
	description = This krane works well as a capsule retrieveal device or for picking up wayward kerbals.

	// attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision
	attachRules = 1,1,1,1,1

	// --- standard part parameters ---
	mass = 0.85
	dragModelType = default
	maximum_drag = 0.25
	minimum_drag = 0.25
	angularDrag = .5
	crashTolerance = 45
	breakingForce = 5500
	breakingTorque = 5500
	maxTemp = 900
	fuelCrossFeed = True
	heatConductivity = 0.001

	MODULE
	{
		name = WBIMagnetController
		magnetTransformName = magnetTransform
		groupID = Arm
		ecPerSec = 1.0

		//We'll use the Servo Manager to control the rotation
		//(defaults to true, so we have the buttons in the right-click menu)
		guiVisible = false

		attachEffectName = attachMagnet
		detachEffectName = detachMagnet
		runningEffectName = runningMagnet
	}

	MODULE
	{
		//This module handles mesh rotation operations such as an engine nacelle pivot.
		name = WBIRotationController
		
		//(Optional, defaults to Actuator) User-friendly name of the rotation controller.
		servoName = Swivel Magnet

		//(Optional, defaults to Engine) Group ID for the actuator. Allows you to differentiate
		//between the VTOL manager (which uses the Engine group), and, say, a robot arm manager.
		groupID = Arm

		//Name of the pivot z+ points down the length of the arm. See Unity model.
		rotationMeshName = magnet

		//Rotation axis of the pivot (x, y, z)
		rotationMeshAxis = 0,1,0

		//We'll use the Servo Manager to control the rotation
		//(defaults to true, so we have the buttons in the right-click menu)
		guiVisible = false

		//We don't do symmetry with this part. This is used for engines for the most part.
		canMirrorRotation = false

		//How fast to rotate the pivot
		rotationDegPerSec = 15

		//Effect to play when a servo is running
		runningEffectName = runningServo
	}

	MODULE
	{
		//This module handles mesh rotation operations such as an engine nacelle pivot.
		name = WBIRotationController
		
		//(Optional, defaults to Actuator) User-friendly name of the rotation controller.
		servoName = Pitch Wrist

		//(Optional, defaults to Engine) Group ID for the actuator. Allows you to differentiate
		//between the VTOL manager (which uses the Engine group), and, say, a robot arm manager.
		groupID = Arm

		//Name of the pivot z+ points down the length of the arm. See Unity model.
		rotationMeshName = wristPitch

		//Rotation axis of the pivot (x, y, z)
		rotationMeshAxis = 1,0,0

		//We'll use the Servo Manager to control the rotation
		//(defaults to true, so we have the buttons in the right-click menu)
		guiVisible = false

		//We don't do symmetry with this part. This is used for engines for the most part.
		canMirrorRotation = false

		//How fast to rotate the pivot
		rotationDegPerSec = 15

		//Maximum rotation angle
		//From 0 to 360 degrees
		//Min --- Neutral (0) --- Max
		//NOTE: if maxRotateAngle & minRotateAngle = -1 (which is the default),
		//then the rotation pivot can go 360 degrees.
		maxRotateAngle = 90

		//Minimum rotation angle (0 to 360 degrees)
		minRotateAngle = 270

		//Can we rotate to minimum?
		//Ex: tilt-rotor can pivot up and forward and that's it.
		canRotateMin = true

		//Can we rotate to maximum?
		canRotateMax = true

		//Effect to play when a servo is running
		runningEffectName = runningServo
	}

	MODULE
	{
		//This module handles mesh rotation operations such as an engine nacelle pivot.
		name = WBIRotationController
		
		//(Optional, defaults to Actuator) User-friendly name of the rotation controller.
		servoName = Yaw Wrist

		//(Optional, defaults to Engine) Group ID for the actuator. Allows you to differentiate
		//between the VTOL manager (which uses the Engine group), and, say, a robot arm manager.
		groupID = Arm

		//Name of the pivot z+ points down the length of the arm. See Unity model.
		rotationMeshName = wristYaw

		//Rotation axis of the pivot (x, y, z)
		rotationMeshAxis = 0,0,1

		//We'll use the Servo Manager to control the rotation
		//(defaults to true, so we have the buttons in the right-click menu)
		guiVisible = false

		//We don't do symmetry with this part. This is used for engines for the most part.
		canMirrorRotation = false

		//How fast to rotate the pivot
		rotationDegPerSec = 15

		//Maximum rotation angle
		//From 0 to 360 degrees
		//Min --- Neutral (0) --- Max
		//NOTE: if maxRotateAngle & minRotateAngle = -1 (which is the default),
		//then the rotation pivot can go 360 degrees.
		maxRotateAngle = 110

		//Minimum rotation angle (0 to 360 degrees)
		minRotateAngle = 250

		//Can we rotate to minimum?
		//Ex: tilt-rotor can pivot up and forward and that's it.
		canRotateMin = true

		//Can we rotate to maximum?
		canRotateMax = true

		//Effect to play when a servo is running
		runningEffectName = runningServo
	}

	MODULE
	{
		name = WBITranslationController

		//(Optional, defaults to Actuator) User-friendly name of the controller.
		servoName = Extend Lower Boom

		//Name of the mesh to move around
		meshTransformName = innerBoom

		//Axis of movement
		movementAxis = 0,-1,0

		//Flag to indicate if the mesh can move "left" of its neutral position. "Neutral" is where the mesh is when first loaded into the game before any translation is applied. Default: true
		hasMinDistance = false

		//Minimum distance from neutral that the mesh can traverse
		//minDistance---------neutral (0)---------maxDistance
//		minDistance = 0


		//Flag to indicate if the mesh can move "right" of its neutral position. "Neutral" is where the mesh is when first loaded into the game before any translation is applied. Default: true
		hasMaxDistance = true

		//Maximum distance from neutral that the mesh can traverse
		//minDistance---------neutral (0)---------maxDistance
		maxDistance = 4.5

		//The rate in meters per second that the mesh may move
		velocityMetersPerSec = 1.0

		//Effect to play when a servo is running
		runningEffectName = runningServo
	}

	MODULE
	{
		name = WBITranslationController

		//(Optional, defaults to Actuator) User-friendly name of the controller.
		servoName = Extend Mid Boom

		//Name of the mesh to move around
		meshTransformName = middleBoom

		//Axis of movement
		movementAxis = 0,-1,0

		//Flag to indicate if the mesh can move "left" of its neutral position. "Neutral" is where the mesh is when first loaded into the game before any translation is applied. Default: true
		hasMinDistance = false

		//Minimum distance from neutral that the mesh can traverse
		//minDistance---------neutral (0)---------maxDistance
//		minDistance = 0


		//Flag to indicate if the mesh can move "right" of its neutral position. "Neutral" is where the mesh is when first loaded into the game before any translation is applied. Default: true
		hasMaxDistance = true

		//Maximum distance from neutral that the mesh can traverse
		//minDistance---------neutral (0)---------maxDistance
		maxDistance = 4.5

		//The rate in meters per second that the mesh may move
		velocityMetersPerSec = 1.0

		//Effect to play when a servo is running
		runningEffectName = runningServo
	}

	MODULE
	{
		name = WBITranslationController

		//(Optional, defaults to Actuator) User-friendly name of the controller.
		servoName = Extend Outer Boom

		//Name of the mesh to move around
		meshTransformName = outerBoom

		//Axis of movement
		movementAxis = 0,1,0

		//Flag to indicate if the mesh can move "left" of its neutral position. "Neutral" is where the mesh is when first loaded into the game before any translation is applied. Default: true
		hasMinDistance = false

		//Minimum distance from neutral that the mesh can traverse
		//minDistance---------neutral (0)---------maxDistance
//		minDistance = 0


		//Flag to indicate if the mesh can move "right" of its neutral position. "Neutral" is where the mesh is when first loaded into the game before any translation is applied. Default: true
		hasMaxDistance = true

		//Maximum distance from neutral that the mesh can traverse
		//minDistance---------neutral (0)---------maxDistance
		maxDistance = 4.5

		//The rate in meters per second that the mesh may move
		velocityMetersPerSec = 1.0

		//Effect to play when a servo is running
		runningEffectName = runningServo
	}

	MODULE
	{
		//This module handles mesh rotation operations such as an engine nacelle pivot.
		name = WBIRotationController
		
		//(Optional, defaults to Actuator) User-friendly name of the rotation controller.
		servoName = Pitch Boom

		//(Optional, defaults to Engine) Group ID for the actuator. Allows you to differentiate
		//between the VTOL manager (which uses the Engine group), and, say, a robot arm manager.
		groupID = Arm

		//Name of the pivot z+ points down the length of the arm. See Unity model.
		rotationMeshName = boomPitch

		//Rotation axis of the pivot (x, y, z)
		rotationMeshAxis = 1,0,0

		//We'll use the Servo Manager to control the rotation
		//(defaults to true, so we have the buttons in the right-click menu)
		guiVisible = false

		//We don't do symmetry with this part. This is used for engines for the most part.
		canMirrorRotation = false

		//How fast to rotate the pivot
		rotationDegPerSec = 15

		//Effect to play when a servo is running
		runningEffectName = runningServo
	}

	MODULE
	{
		name = WBITranslationController

		//(Optional, defaults to Actuator) User-friendly name of the controller.
		servoName = Extend Jib

		//Name of the mesh to move around
		meshTransformName = Jib

		//Axis of movement
		movementAxis = 0,-1,0

		//Flag to indicate if the mesh can move "left" of its neutral position. "Neutral" is where the mesh is when first loaded into the game before any translation is applied. Default: true
		hasMinDistance = false

		//Minimum distance from neutral that the mesh can traverse
		//minDistance---------neutral (0)---------maxDistance
//		minDistance = 0


		//Flag to indicate if the mesh can move "right" of its neutral position. "Neutral" is where the mesh is when first loaded into the game before any translation is applied. Default: true
		hasMaxDistance = true

		//Maximum distance from neutral that the mesh can traverse
		//minDistance---------neutral (0)---------maxDistance
		maxDistance = 4.85

		//The rate in meters per second that the mesh may move
		velocityMetersPerSec = 1.0

		//Effect to play when a servo is running
		runningEffectName = runningServo
	}

	MODULE
	{
		//This module handles mesh rotation operations such as an engine nacelle pivot.
		name = WBIRotationController
		
		//(Optional, defaults to Actuator) User-friendly name of the rotation controller.
		servoName = Pitch Jib

		//(Optional, defaults to Engine) Group ID for the actuator. Allows you to differentiate
		//between the VTOL manager (which uses the Engine group), and, say, a robot arm manager.
		groupID = Arm

		//Name of the pivot z+ points down the length of the arm. See Unity model.
		rotationMeshName = JibMount

		//Rotation axis of the pivot (x, y, z)
		rotationMeshAxis = 1,0,0

		//We'll use the Servo Manager to control the rotation
		//(defaults to true, so we have the buttons in the right-click menu)
		guiVisible = false

		//We don't do symmetry with this part. This is used for engines for the most part.
		canMirrorRotation = false

		//How fast to rotate the pivot
		rotationDegPerSec = 15

		//Maximum rotation angle
		//From 0 to 360 degrees
		//Min --- Neutral (0) --- Max
		//NOTE: if maxRotateAngle & minRotateAngle = -1 (which is the default),
		//then the rotation pivot can go 360 degrees.
		maxRotateAngle = 75

		//Minimum rotation angle (0 to 360 degrees)
		minRotateAngle = 270

		//Can we rotate to minimum?
		//Ex: tilt-rotor can pivot up and forward and that's it.
		canRotateMin = true

		//Can we rotate to maximum?
		canRotateMax = true

		//Effect to play when a servo is running
		runningEffectName = runningServo
	}

	MODULE
	{
		//This module handles mesh rotation operations such as an engine nacelle pivot.
		name = WBIRotationController
		
		//(Optional, defaults to Actuator) User-friendly name of the rotation controller.
		servoName = Pitch Mast

		//(Optional, defaults to Engine) Group ID for the actuator. Allows you to differentiate
		//between the VTOL manager (which uses the Engine group), and, say, a robot arm manager.
		groupID = Arm

		//Name of the pivot z+ points down the length of the arm. See Unity model.
		rotationMeshName = Mast

		//Rotation axis of the pivot (x, y, z)
		rotationMeshAxis = 1,0,0

		//We'll use the Servo Manager to control the rotation
		//(defaults to true, so we have the buttons in the right-click menu)
		guiVisible = false

		//We don't do symmetry with this part. This is used for engines for the most part.
		canMirrorRotation = false

		//How fast to rotate the pivot
		rotationDegPerSec = 15

		//Maximum rotation angle
		//From 0 to 360 degrees
		//Min --- Neutral (0) --- Max
		//NOTE: if maxRotateAngle & minRotateAngle = -1 (which is the default),
		//then the rotation pivot can go 360 degrees.
		maxRotateAngle = 90

		//Minimum rotation angle (0 to 360 degrees)
		minRotateAngle = 270

		//Can we rotate to minimum?
		//Ex: tilt-rotor can pivot up and forward and that's it.
		canRotateMin = true

		//Can we rotate to maximum?
		canRotateMax = true

		//Effect to play when a servo is running
		runningEffectName = runningServo
	}

	MODULE
	{
		//This module handles mesh rotation operations such as an engine nacelle pivot.
		name = WBIRotationController
		
		//(Optional, defaults to Actuator) User-friendly name of the rotation controller.
		servoName = Swivel Krane

		//(Optional, defaults to Engine) Group ID for the actuator. Allows you to differentiate
		//between the VTOL manager (which uses the Engine group), and, say, a robot arm manager.
		groupID = Arm

		//Name of the pivot z+ points down the length of the arm. See Unity model.
		rotationMeshName = SwivelMount

		//Rotation axis of the pivot (x, y, z)
		rotationMeshAxis = 0,0,1

		//We'll use the Servo Manager to control the rotation
		//(defaults to true, so we have the buttons in the right-click menu)
		guiVisible = false

		//We don't do symmetry with this part. This is used for engines for the most part.
		canMirrorRotation = false

		//How fast to rotate the pivot
		rotationDegPerSec = 15

		//Effect to play when a servo is running
		runningEffectName = runningServo
	}

	//Put this module LAST in the list of rotation controllers and such.
	//It provides a button to display a GUI.
	MODULE
	{
		name = WBIServoManager

		//Effect to play when a servo is running
		runningEffectName = runningServo
	}

	MODULE:NEEDS[KIS]
	{

		name = ModuleKISPickup

	        allowPartAttach = true

	        allowStaticAttach = false

	        allowPartStack = false

	        maxDistance = 16

	        grabMaxMass = 6

	        dropSndPath = KIS/Sounds/drop

	        attachPartSndPath = KIS/Sounds/attachPart

	        detachPartSndPath= KIS/Sounds/detachPart

	        attachStaticSndPath= KIS/Sounds/attachStatic

	        detachStaticSndPath= KIS/Sounds/detachStatic

	}


	EFFECTS
	{
		attachMagnet
		{
			AUDIO
			{
				channel = Ship
				clip = Squad/Sounds/elev_start
				volume = 1.0
				pitch = 1.0
				loop = false
			}
		}

		detachMagnet
		{
			AUDIO
			{
				channel = Ship
				clip = Squad/Sounds/sound_click_tock
				volume = 1.0
				pitch = 1.0
				loop = false
			}
		}
		runningMagnet
		{
			AUDIO
			{
				channel = Ship
				clip = WildBlueIndustries/001KerbalActuators/Sounds/MagnetRunning
				volume = 0.0 0.0
				volume = 1.0 0.1
				pitch = 0.0 0.0
				pitch = 1.0 1.5
				loop = true
			}
		}		runningServo
		{
			AUDIO
			{
				channel = Ship
				clip = WildBlueIndustries/001KerbalActuators/Sounds/ServoLoop
				volume = 0.0 0.0
				volume = 1.0 10.0
				pitch = 1.0 1.0
				loop = true
			}
		}
	}
}