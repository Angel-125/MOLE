PART
{
	name = wbiPipeline
	module = Part
	author = Angel-125

	MODEL
	{
		model = WildBlueIndustries/Pathfinder/Parts/BoxedParts/Pipeline/Pipeline
	}
	rescaleFactor = 1

	node_attach = 0, 0, 0, 0, -1, 0, 1
	node_stack_bottom = 0, 0, 0, 0, -1, 0, 1
	node_stack_top = 0, 0.8288187, 0, 0, 1, 0, 1

	TechRequired = nanolathing
	entryCost = 43800
	cost = 18000
	category = Utility
	subcategory = 0
	title = Pipeline Mass Driver
	manufacturer = Wild Blue Industries
	description = Pipeline is a combined mass driver and mass catcher. It can launch Rocket-assisted Object Containers (ROCs) hundreds of kilometers away to another Pipeline Mass Driver or to an Orbital Pipeline. The maximum payload capacity varies based factors like range to the target and the pull of gravity. Launching a ROC costs guidance data to calculate the trajectory, ElectricCharge to launch the projectile, and LiquidFuel and Oxidizer for course corrections.

	// attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision
	attachRules = 1,1,1,1,1

	// --- standard part parameters ---
	mass = 0.1
	dragModelType = default
	maximum_drag = 0.2
	minimum_drag = 0.2
	angularDrag = 2
	crashTolerance = 7
	maxTemp = 3900
	breakingForce = 50
	breakingTorque = 50
	bulkheadProfiles = size1, srf

	MODULE:NEEDS[KIS]
	{
		name = ModuleKISItemEvaTweaker
		volumeOverride = 1100
		editorItemsCategory = false
		carriable = true
		equipMode = part
		equipSlot = jetpack
		equipMeshName = jetpack_base01
		equipBoneName = bn_jetpack01
		equipPos = (0,-0.2,-0.45)
		equipDir = (0,0,0)
		runSpeed = 0.8
		allowPartAttach = 1
	}

	MODULE:NEEDS[KAS]
	{
		name = KASModulePort
		attachNode = top
		nodeType = kasplug
		breakForce = 30
		nodeTransformName = plugPort1
	}

	MODULE:NEEDS[KAS]
	{
		name = KASModuleStrut 
		nodeTransform = plugPort
		type = PipeSize1
		maxLenght = 50
		maxAngle = 100
		breakForce = 600
		allowDock = true
		allowPumpFuel = true
		hasCollider = false
		tubeScale = 0.15
		jointScale = 0.15
		textureTiling = 1
		tubeSrcType = Joined
		tubeTgtType = Joined
		evaStrutPos = (0.05, 0.059, -0.21)
		evaStrutRot = (190.0, 0.0, 0.0)
		tubeTexPath = KAS/Textures/pipe
	}

	MODULE:NEEDS[KIS]
	{
		name = ModuleKISInventory
		maxVolume = 8000
		externalAccess = true
		internalAccess = true
		slotsX = 5
		slotsY = 5
		slotSize = 50
		itemIconResolution = 128
		selfIconResolution = 128
		openSndPath = KIS/Sounds/containerOpen
		closeSndPath = KIS/Sounds/containerClose
		defaultMoveSndPath = KIS/Sounds/itemMove
	}

	MODULE
	{
		name = WBIPipeEndpoint

		//Can the pipeline send payloads from orbit to ground? Normally this isn't allowed.
		allowOrbitToGround = false

		//Amount of ec/sec required to maintain activation state.
		activationCostEC = 400

		//Maximum amount of kinetic energy that the mass driver can generate
		//K.E. = (0.5 * projectile mass) * (velocity^2)
		//Calibrated for a 14 metric ton projectile accelerated to 650 m/sec (~Mun orbital velocity)
		//Factor in fuel and container mass, and you can put 10 metric tonnes into munar orbit.
		maxKineticEnergy = 2958978750

		//Multiplied by payload mass to get the fuel mass required for course corrections.
		//The required amount of LiquidFuel and Oxidizer is derived from the total fuel mass.
		fuelMassFraction = 0.334

		//The dry mass fraction of the delivery vehicle.
		//Dry mass = (payload mass + fuel mass) * dryMassFraction
		dryMassFraction = 0.05

        	//How much guidance data does it cost per kilometer of distance to the destination.
	        //Example: A destination that is 500km away requires 500 * 0.02 = 10 units of guidance data.
		dataCostPerKm = 0.02

        	//Multiplier to the data cost for ground-to-orbit shots.
	        //Example: A station orbiting at an altitude of 100km requires 100 * .02 * 5 = 10 units of trajectory data.
		orbitalCostMultiplier = 5

        	//How much electric charge to cost per metric ton of the delivery vehicle.
		//Includes the cost of fuel for rocket assist and structural mass.
        	//Example: A vehicle with a 10-tonne capacity and 10 tonnes of fuel masses 21 tonnes. EC cost: 21 * 1000 = 21000.
		electricityCostPerTonne = 1000.0

		//How much trajectory data to generate per second while the endpoint is active.
		//Requires canSendPayloads = true.
		dataGenerationRate = 0.00084

		//Max amount of guidance data that the computer can hold.
		maxGuidanceData = 1000
	}

	MODULE
	{
		name = WBIPackingBox
		showGUI = true

		packingBoxTransform = PackingBox

		//Determines whether or not the part is inflatable
		isInflatable = True
		isOneShot = true
		staticAttachOnDeploy = true

		//Name of inflatable animation
		animationName = Deploy

		//GUI name of deploy animation
		startEventGUIName = Assemble

		//GUI name of retract animation
		endEventGUIName = Disassemble (EDITOR ONLY)

		//Some containers don't hold as much resources as the template specifies, while others hold more.
		//Since the resource templates specify base amounts, the capacity factor specifies a multiplier to
		//factor into the resource amounts.
		capacityFactor = 1.0

		//Determines if the part can be reconfigured out in the field.
		fieldReconfigurable = false

		//name of the template nodes to use
		templateNodes = PIPELINE

		//Short name of the default module template.
		//This is used when selecting the part in the editor.
		//User will then right-click on the module to change its type.
		defaultTemplate = Pipeline

		decalsVisible = false

		partToolTipTitle = Pipeline Mass Driver
		partToolTip = You can transfer KIS items between facilities and craft in addition to resources.

		opsViewTitle = Pipeline Operations
		showOpsView = false

		//If the part has a KIS container, this is the base and max amount
		baseStorage = 0.001
		maxStorage = 8000
	}

	MODULE:NEEDS[BARIS]
	{
		name = ModuleQualityControl
		quality = 50
		mtbf = 2556
		showGui = false
	}

}

@PART[KIS_ContainerMount1]:NEEDS[KIS]
{
	@MODULE[ModuleKISPartMount]
	{
		@MOUNT
		{
			allowedPartName = wbiPipeline
		}
	}
}

PIPELINE
{
	author = Angel-125
	name = Pipeline
	description = Pipeline is a combined mass driver and mass catcher. It can launch Rocket-assisted Object Containers (ROCs) hundreds of kilometers away to another Pipeline Mass Driver or to a Pipeline Orbital Mass Driver. The maximum payload capacity varies based on the range to the target and the pull of gravity. Launching a ROC costs guidance data to calculate the trajectory, ElectricCharge to launch the projectile, and LiquidFuel and Oxidizer for course corrections.
	isKISInventory = True
	reconfigureSkill = ConverterSkill

	INPUT_RESOURCE
	{
		ResourceName = Equipment
		Ratio = 20000
	}

	INPUT_RESOURCE
	{
		ResourceName = Konkrete
		Ratio = 10000
	}

	RESOURCE
	{
		name = ElectricCharge
		amount = 2000
		maxAmount = 2000
	}
}