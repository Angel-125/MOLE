PART
{
	// this is a sample config file, for determining a good file format for defining part parameters
	// comment line - ignored by cfg parser
	// empty lines, or lines without a '=' sign are also ignored
	// all other lines are split at the '=' sign, and the left operand is used to know what parameter we are setting
	// diferent parameters require data in different formats (see docs), and each module has it's own parameters (again, see docs)
	// each assignment must be in a single line. Lines without assignments will be ignored. (You CAN turn on word wrap, though)
	// each keyword here relates to an existing variable in the assigned module. If the keyword isn't found, it is ignored.
	// conversely, if a keyword is left unassigned (as in not in the file), it will be initialized with it's default value
	// This is done automatically, so any public variable defined in the loaded module can be accessed this way (provided it's value can be parsed)


	// --- general parameters ---
	name = WBI_Brumby
	module = Part
	author = Angel-125

	// --- asset parameters ---
	MODEL
	{
		model = WildBlueIndustries/MOLE/Assets/Brumby
	}
	rescaleFactor = 1

	// --- node definitions ---
	// definition format is Position X, Position Y, Position Z, Up X, Up Y, Up Z
	node_stack_top = 0.0, 0.9498018, 0.0, 0.0, 1.0, 0.0, 1
	node_stack_bottom = 0.0, -0.8490138, 0.0, 0.0, -1.0, 0.0, 1

	// --- editor parameters ---
	TechRequired = advFlightControl
	entryCost = 14000
	cost = 3000
	category = Pods
	subcategory = 0
	title = Mk1-88 Brumby
	manufacturer = Wild Blue Industries
	description = KSC rejected Wild Blue Industries' first attempt at upgrading the Mk1 command pod, but the company saved its reputation by turning their design into the successful Mk1-85 Appaloosa "Backseat." For their next attempt, the engineers redesigned the Backseat and created their 2-seater Mk1-88 "Brumby" command pod. This design proved easier to fly for docking maneuvers, mostly because kerbals don't like backseat drivers.

	// attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision
	attachRules = 1,0,1,1,0

	// --- standard part parameters ---
	mass = 2.4
	dragModelType = default
	maximum_drag = 0.2
	minimum_drag = 0.15
	angularDrag = 2
	crashTolerance = 30
	breakingForce = 200
	breakingTorque = 200
	maxTemp = 1300
	skinMaxTemp = 2300
	CoMOffset = 0,-.6,0
	CoPOffset = 0.0, -0.4, 0.0 //drag force offset, should be ahead of center of mass
	CenterOfBuoyancy = 0.0, 0.5, 0.0
	CenterOfDisplacement = 0.0, -1.7, 0.0
	buoyancyUseSine = False
	buoyancy = 1.5
	bulkheadProfiles = size1p5, size0
	vesselType = Ship

	// --- internal setup ---
	CrewCapacity = 2

	INTERNAL
	{
		name = WBI_BrumbySpaceStock
	}

	MODULE
	{
		name = ModuleProbeControlPoint
		minimumCrew = 2
		multiHop = False
	}

	MODULE
	{
		name = ModuleCommand
		minimumCrew = 1	
	}

	MODULE
	{
		name = ModuleSAS
		SASServiceLevel = 1
		showUpgradesInModuleInfo = true
		UPGRADES
		{
			UPGRADE
			{
				name__ = WBIFlightControl2
				description__ = S.A.S. Level: 2
				SASServiceLevel = 2
			}
			UPGRADE
			{
				name__ = WBIFlightControl3
				description__ = S.A.S. Level: 3
				SASServiceLevel = 3
			}
		}
	}

	MODULE
	{
	      name = FlagDecal
	      textureQuadName = flagTransform
	}

	MODULE
	{
		name = WBILight
		animationName = BrumbyLights
		actionGUIName = Toggle Lights
		startEventGUIName = Lights On
		endEventGUIName = Lights Off
		ecRequired = 0.001
	}

	EFFECTS
	{
		running
		{
			AUDIO_MULTI
			{
				channel = Ship
				transformName = rcsThruster
				clip = sound_rocket_mini
				volume = 0.0 0.0
				volume = 0.1 0.0
				volume = 0.5 0.025
				volume = 1.0 0.1
				pitch = 0.0 0.75
				pitch = 1.0 1.5
				loop = true
			}
			MODEL_MULTI_PARTICLE
			{
				modelName = Squad/FX/Monoprop_small
				transformName = rcsThruster
				emission = 0.0 0.0
				emission = 0.1 0.0
				emission = 1.0 1.0
				speed = 0.0 0.8
				speed = 1.0 1.0
				localRotation = -90, 0, 0
			}
		}		
	}
	
	MODULE
	{
		name = ModuleRCSFX
		stagingEnabled = False
		thrusterTransformName = rcsThruster
		thrusterPower = 1
		resourceName = MonoPropellant
		resourceFlowMode = STAGE_PRIORITY_FLOW
		runningEffectName = running
		atmosphereCurve
		{
			key = 0 240
			key = 1 100
			key = 4 0.001
		}
	}

	MODULE
	{
		name = ModuleReactionWheel	
		PitchTorque = 5
		YawTorque = 5
		RollTorque = 5
	
		RESOURCE
		{
			name = ElectricCharge
			rate = 0.24
		}
	}

	MODULE
	{
		name = ModuleScienceExperiment	
	
		experimentID = crewReport
	
		experimentActionName = Crew Report
		resetActionName = Discard Crew Report
		reviewActionName = Review Report
	
		useStaging = False	
		useActionGroups = True
		hideUIwhenUnavailable = True	
		rerunnable = True
	
		xmitDataScalar = 1.0
	}

	MODULE
	{
		name = ModuleScienceContainer
	
		reviewActionName = Review Stored Data
		storeActionName = Store Experiments
		evaOnlyStorage = True
		storageRange = 1.3
	}

	MODULE
	{
		name = ModuleDataTransmitter
		antennaType = INTERNAL
		packetInterval = 1.0
		packetSize = 2
		packetResourceCost = 12.0
		requiredResource = ElectricCharge
		antennaPower = 5000
		optimumRange = 2500
		packetFloor = .1
		packetCeiling = 5
	}

	MODULE
	{
		name = WBIPropStateHelper
	}

	MODULE
	{
		name = ModuleResourceConverter
		ConverterName = MPU
		StartActionName = Start MPU
		StopActionName = Stop MPU
		FillAmount = 0.99		 
		AutoShutdown = true
		GeneratesHeat = false
		TemperatureModifier = 60
		UseSpecializationBonus = true
		SpecialistEfficiencyFactor = 0.1
		ExperienceEffect = ConverterSkill
		EfficiencyBonus = 1.0
		 
		INPUT_RESOURCE
		{
			ResourceName = MonoPropellant
			Ratio = 0.00375
			FlowMode = ALL_VESSEL
		}

		OUTPUT_RESOURCE
		{
			ResourceName = ElectricCharge
			Ratio = 0.75
			DumpExcess = false
		}
	}

	MODULE
	{
		name = ModuleConductionMultiplier
		modifiedConductionFactor = 0.003
		convectionFluxThreshold = 3000
	}

	MODULE:NEEDS[KerbalEngineer]
	{
		name = FlightEngineerModule
	}

	RESOURCE
	{
		name = MonoPropellant
		amount = 100
		maxAmount = 100
	}

	RESOURCE
	{
		name = ElectricCharge
		amount = 200
		maxAmount = 200
	}

}

//ASET/RPM versions of the cockpit
@PART[WBI_Brumby]:NEEDS[RasterPropMonitor]
{
	!MODULE[WBIPropStateHelper] {}

	MODULE
	{
		name = RasterPropMonitorComputer 
	}

	@INTERNAL[WBI_BrumbySpaceStock]:NEEDS[ASETPropsIdentifier]
	{
		@name = WBI_BrumbySpaceASET
	}
	@INTERNAL[WBI_BrumbySpaceStock]:NEEDS[!ASETPropsIdentifier]
	{
		@name = WBI_BrumbySpaceRPM
	}
}

@PART[WBI_Brumby]:NEEDS[kOS]
{
	MODULE
	{
		name = kOSProcessor
		diskSpace = 5000
	}
}